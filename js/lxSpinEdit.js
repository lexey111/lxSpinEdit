//@ sourceMappingURL=lxSpinEdit.map
// Generated by CoffeeScript 1.6.1
/*
  Class for spinEdit control
  http://lexey111.com
  (c) lexey111, 2013

  v.1.3

  Requires: jquery 1.8+

  Usage example:
        var cntr_angle = new LxSpinEdit({
            container: '#bcoc_regular', <-- container's selector, place to embed
            id: 'cntr_angle',           <-- ID of control, required, has to be unique
            title: 'Rotate',            <-- left caption (title)
            slider: true,               <-- use slider, true|false
            min: -359,                  <-- minimum value
            max: 359,                   <-- maximum
            step: 1,                    <-- value changing step for buttons "+" and "-" and mouse wheel
            value: 0,                   <-- initial value
            measure: '&deg;'            <-- right caption (measure units)
        });

  Full set of options and default values you could find in the constructor, @properties object
*/

var LxSpinEdit;

LxSpinEdit = (function() {
  /**
    Check is given value is real number
    @param n
    @returns {boolean}
  */

  LxSpinEdit.prototype.isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  /**
    ITEM CONSTRUCTOR
  */


  function LxSpinEdit(options) {
    this.id = '';
    this.control = null;
    this.title = null;
    this.measure = null;
    this.input = null;
    this.up_button = null;
    this.down_button = null;
    this.percentage_bar = null;
    this.diapazone = 0;
    this.slider = null;
    this.slider_track_length = -1;
    this.slider_track_offset = -1;
    this.slider_handle = null;
    this.slider_trackbar = null;
    this.slider_min = null;
    this.slider_max = null;
    this.slider_current = null;
    this.in_drag = false;
    this.slider_mode = false;
    this.dp = 0;
    this.value = null;
    this.properties = $.extend({
      id: '',
      container: 'body',
      title: '',
      hide_title: false,
      enabled: true,
      min: 0,
      max: 0,
      value: 0,
      fixed: false,
      point_pos: 1,
      step: 0,
      measure: '',
      always_use_wheel: false,
      slider: false,
      live_slider: false,
      clear_after: false,
      percent_bar: false,
      percent_full_size: false,
      hide_buttons: false,
      callback_change: null,
      callback_focus: null
    }, options);
    this.init();
    return this;
  }

  /**
    Initialize function
  */


  LxSpinEdit.prototype.init = function() {
    var s;
    if (this.properties.id === '') {
      throw "ID is empty!";
    }
    if (!$(this.properties.container).length) {
      throw "Container not found!";
    }
    if ($(this.properties.container).find('#' + this.properties.id).length) {
      throw "ID [" + this.properties.id + "] already exists!";
    }
    this.id = this.properties.id;
    s = '<div id="' + this.properties.id + '" class="bco_control ';
    if (this.properties.percent_bar && this.properties.percent_full_size) {
      s += ' bco_full_size';
    }
    if (!this.properties.enabled) {
      s += ' disabled';
    }
    if (this.properties.hide_title === true) {
      s += ' bco_no_title';
    }
    if (this.properties.hide_buttons === true) {
      s += ' bco_hide_buttons';
    }
    s += '">';
    this.slider_mode = this.properties.slider;
    this.use_percentage = this.properties.percent_bar;
    this.diapazone = this.properties.max - this.properties.min;
    s += '<input class="bco_input" type="text" ';
    if (!this.properties.enabled) {
      s += 'readonly="readonly" ';
    }
    s += 'value="' + this.properties.value + '"/>';
    if (!this.properties.hide_title) {
      s += '<span class="bco_title noselect">' + this.properties.title + '</span>';
    }
    if (this.use_percentage) {
      s += '<div class="bco_percentage';
      s += '"><span></span></div>';
    }
    s += '<div class="bco_buttons">';
    s += '<div class="bco_btn bco_up noselect" tabindex="-1">+</div>';
    s += '<div class="bco_btn bco_down noselect" tabindex="-1">&dash;</div>';
    s += '</div>';
    s += '<div class="bco_focus_rect">';
    s += '</div>';
    s += '<span class="bco_measurement noselect">' + this.properties.measure + '</span>';
    if (this.slider_mode) {
      s += '<div class="bco_slider_container">';
      s += '<div class="bco_slider_trackbar" tabindex="-1"></div>';
      s += '<div class="bco_slider_handle" tabindex="-1"><b></b></div>';
      s += '<div class="bco_arrow_up"></div>';
      s += '<div class="bco_slider_slider">';
      s += '</div>';
      s += '<div class="bcos_min"></div>';
      s += '<div class="bcos_cur"><span></span></div>';
      s += '<div class="bcos_max"></div>';
      s += '</div>';
    }
    s += '</div>';
    if (this.properties.clear_after === true) {
      s += '<div class="bco_clearfix"></div>';
    }
    this.dp = this.properties.point_pos;
    if (this.properties.fixed) {
      this.dp = 0;
    }
    $(this.properties.container).append(s);
    this.control = $(this.properties.container).find('#' + this.properties.id);
    if (!$(this.control).length) {
      throw "Control not found!";
    }
    this.title = $(this.control).find('.bco_title');
    this.measure = $(this.control).find('.bco_measurement');
    this.up_button = $(this.control).find('.bco_up');
    this.down_button = $(this.control).find('.bco_down');
    this.slider_current = $(this.control).find('.bcos_cur');
    this.input = $(this.control).find('.bco_input');
    if (this.input == null) {
      throw "Input not found!";
    }
    this.percentage_bar = $(this.control).find('.bco_percentage span');
    this._assignHandlers();
    this.value = this.properties.value;
    this._initSliderTexts();
    this._actualizeSlider();
    return this;
  };

  /**
    Set handlers for various events
  */


  LxSpinEdit.prototype._assignHandlers = function() {
    var element, mousewheelevt;
    mousewheelevt = /Firefox/i.test(navigator.userAgent) ? "DOMMouseScroll" : "mousewheel";
    element = this;
    if (this.slider_mode) {
      this.slider = $(this.control).find('.bco_slider_container');
      this.slider_min = $(this.control).find('.bcos_min');
      this.slider_max = $(this.control).find('.bcos_max');
      this.slider_handle = $(this.control).find('.bco_slider_handle');
      this.slider_trackbar = $(this.control).find('.bco_slider_trackbar');
      this.slider_track_length = $(this.slider_trackbar).width();
      this.slider_track_offset = parseInt($(this.slider_trackbar).css('left'));
      $(this.slider).mousedown(function(e) {
        e.preventDefault();
        return false;
      });
      $(this.slider).get(0).addEventListener(mousewheelevt, function(e) {
        var up;
        e.preventDefault();
        if (element.in_drag === true) {
          return false;
        }
        up = true;
        if (e.wheelDelta && e.wheelDelta < 0) {
          up = false;
        } else {
          if (e.detail && e.detail > 0) {
            up = false;
          }
        }
        if (up) {
          element.increase(element.properties.step);
        } else {
          element.decrease(element.properties.step);
        }
        return false;
      }, false);
      $(this.slider_trackbar).mousedown(function(e) {
        var mouse_x, percent;
        e.preventDefault();
        if (e.which !== 1) {
          return false;
        }
        if (element.in_drag === true) {
          return false;
        }
        mouse_x = e.offsetX || e.clientX - $(e.target).offset().left;
        percent = mouse_x / element.slider_track_length;
        element.setValue(element.properties.min + element.diapazone * percent);
        element._callChangeCallback();
        return false;
      });
      $(this.slider_handle).mousedown(function(e) {
        e.preventDefault();
        if (e.which !== 1) {
          return false;
        }
        if (element.in_drag === false) {
          element.stored_x = parseInt($(element.slider_handle).css('left'));
          element.stored_cx = e.pageX;
          element.in_drag = true;
        }
        return false;
      });
      $(this.slider).mousemove(function(e) {
        var delta, new_position, percent;
        if (element.in_drag === true) {
          delta = element.stored_cx - e.clientX;
          new_position = element.stored_x - delta;
          if (new_position < element.slider_track_offset) {
            new_position = element.slider_track_offset;
          }
          if (new_position > element.slider_track_offset + element.slider_track_length) {
            new_position = element.slider_track_offset + element.slider_track_length;
          }
          percent = (new_position - element.slider_track_offset) / element.slider_track_length;
          element.setValue(element.properties.min + element.diapazone * percent);
          if (element.properties.live_slider === true) {
            element._callChangeCallback();
          }
        }
        return true;
      });
      $(document).mouseup(function(e) {
        e.preventDefault();
        if (element.in_drag === true) {
          element.in_drag = false;
          element._callChangeCallback();
        }
        return false;
      });
    }
    $(this.up_button).click(function(e) {
      e.preventDefault();
      if (e.which !== 1) {
        return false;
      }
      if ($(element.control).hasClass("disabled")) {
        return false;
      }
      element.increase(element.properties.step * (e.shiftKey ? 10 : 1));
      return false;
    }).mousedown(function() {
      return false;
    });
    $(this.down_button).click(function(e) {
      e.preventDefault();
      if (e.which !== 1) {
        return false;
      }
      if ($(element.control).hasClass("disabled")) {
        return false;
      }
      element.decrease(element.properties.step * (e.shiftKey ? 10 : 1));
      return false;
    }).mousedown(function() {
      return false;
    });
    $(this.title).first().click(function(e) {
      if ($(element.control).hasClass("disabled")) {
        return false;
      }
      e.preventDefault();
      $(element.input).focus();
      return false;
    });
    $(this.input).change(function() {
      element.value = parseFloat($(element.input).val());
      element._checkValue();
      element._actualizeSlider();
      element._callChangeCallback();
      return false;
    });
    $(this.input).get(0).addEventListener('keyup', function(e) {
      if ($(element.control).hasClass("disabled")) {
        return false;
      }
      if (e.which === 38 && e.ctrlKey) {
        element.increase(element.properties.step * (e.shiftKey ? 10 : 1));
      }
      if (e.which === 40 && e.ctrlKey) {
        element.decrease(element.properties.step * (e.shiftKey ? 10 : 1));
      }
      return false;
    }, true);
    $(this.input).get(0).addEventListener('focus', function() {
      if (typeof element.properties.callback_focus === 'function') {
        element._callFocusCallback();
      }
      return false;
    }, false);
    return $(this.input).get(0).addEventListener(mousewheelevt, function(e) {
      var up;
      if ($(element.control).hasClass("disabled")) {
        return false;
      }
      if (!element.properties.always_use_wheel) {
        if (!$(element.input).is(':focus')) {
          return false;
        }
      }
      e.preventDefault();
      up = true;
      if (e.wheelDelta && e.wheelDelta < 0) {
        up = false;
      } else {
        if (e.detail && e.detail > 0) {
          up = false;
        }
      }
      if (up) {
        element.increase(element.properties.step);
      } else {
        element.decrease(element.properties.step);
      }
      return false;
    }, false);
  };

  /**
    Increase value to delta
  */


  LxSpinEdit.prototype.increase = function(delta) {
    if (!delta) {
      delta = this.properties.step;
    }
    this.setValue(parseFloat(this.value) + parseFloat(delta));
    return this._callChangeCallback();
  };

  /**
    Decrease value to delta
  */


  LxSpinEdit.prototype.decrease = function(delta) {
    if (!delta) {
      delta = this.properties.step;
    }
    this.setValue(parseFloat(this.value) - parseFloat(delta));
    return this._callChangeCallback();
  };

  /**
    Check is current value valid (min <= value <= max)
    and blink error if no
  */


  LxSpinEdit.prototype._checkValue = function() {
    var element;
    if (!this.isNumber(this.value) || this.value < this.properties.min || this.value > this.properties.max) {
      $(this.input).addClass('error');
      if (!this.isNumber(this.value) || this.value < this.properties.min) {
        this.value = this.properties.min;
      }
      if (this.value > this.properties.max) {
        this.value = this.properties.max;
      }
      element = this;
      setTimeout(function() {
        $(element.input).removeClass('error');
        return false;
      }, 200);
    } else {
      $(this.input).removeClass('error');
    }
    this.value = parseFloat(this.value).toFixed(this.dp);
    return $(this.input).val(this.value);
  };

  /**
    Make callback on change value
  */


  LxSpinEdit.prototype._callChangeCallback = function() {
    if ((this.properties.callback_change != null) && typeof this.properties.callback_change === 'function') {
      return this.properties.callback_change.call(this, this.value);
    }
  };

  /**
    Make callback on focus input
  */


  LxSpinEdit.prototype._callFocusCallback = function() {
    if ((this.properties.callback_focus != null) && typeof this.properties.callback_focus === 'function') {
      return this.properties.callback_focus.call(this);
    }
  };

  /**
    Actualize slider position
  */


  LxSpinEdit.prototype._actualizeSlider = function() {
    var handle_left, pc;
    pc = 0;
    if (this.diapazone !== 0) {
      pc = ((this.value - this.properties.min) / this.diapazone) * 100;
    }
    handle_left = (parseFloat(this.slider_track_offset) + parseFloat(this.slider_track_length * pc / 100)).toFixed(0) + 'px';
    $(this.slider_handle).css({
      left: handle_left,
      top: 12
    });
    $(this.slider_current).html(this.value + (typeof this.properties.measure !== 'undefined' ? '<span>' + this.properties.measure + '</span>' : void 0));
    return $(this.percentage_bar).css({
      width: Math.round(pc) + '%'
    });
  };

  /**
    Set the current value and update control state
    @param {number|string} value
  */


  LxSpinEdit.prototype.setValue = function(value) {
    this.value = parseFloat(value).toFixed(this.dp);
    this._checkValue();
    this._actualizeSlider();
    return true;
  };

  /**
    Set the title of controls
    @param {string} title
  */


  LxSpinEdit.prototype.setTitle = function(title) {
    this.properties.title = title;
    return $(this.title).html(title);
  };

  /**
    Set min-max-current values to the slider
  */


  LxSpinEdit.prototype._initSliderTexts = function() {
    $(this.slider_min).html(this.properties.min);
    $(this.slider_max).html(this.properties.max);
    return $(this.slider_current).html(this.value + (typeof this.properties.measure !== 'undefined' ? '<span>' + this.properties.measure + '</span>' : void 0));
  };

  /**
    Set the measurement unit of controls
    @param {string} title
  */


  LxSpinEdit.prototype.setMeasurement = function(measurement) {
    this.properties.measure = measurement;
    $(this.measure).html(measurement);
    return this._actualizeSlider();
  };

  /**
    Set Minimum value
    @param {string} title
  */


  LxSpinEdit.prototype.setMin = function(min) {
    this.properties.min = parseFloat(min);
    this.diapazone = this.properties.max - this.properties.min;
    this._initSliderTexts();
    return this._actualizeSlider();
  };

  /**
    Set Maximum value
    @param {string} title
  */


  LxSpinEdit.prototype.setMax = function(max) {
    this.properties.max = parseFloat(max);
    this.diapazone = this.properties.max - this.properties.min;
    this._initSliderTexts();
    return this._actualizeSlider();
  };

  /**
    Getters
  */


  LxSpinEdit.prototype.getValue = function() {
    return this.value;
  };

  LxSpinEdit.prototype.getTitle = function() {
    return this.properties.title;
  };

  LxSpinEdit.prototype.getMin = function() {
    return this.properties.min;
  };

  LxSpinEdit.prototype.getMax = function() {
    return this.properties.max;
  };

  LxSpinEdit.prototype.getMeasurement = function() {
    return this.properties.measure;
  };

  /**
    Hide control
  */


  LxSpinEdit.prototype.hide = function() {
    return $(this.control).hide();
  };

  /**
    Show control
  */


  LxSpinEdit.prototype.show = function() {
    return $(this.control).show();
  };

  /**
    Get disabled state
  */


  LxSpinEdit.prototype.isControlDisabled = function() {
    return $(this.control).hasClass('disabled');
  };

  /**
      Enable control
  */


  LxSpinEdit.prototype.enable = function() {
    $(this.control).removeClass('disabled');
    return $(this.input).removeAttr('readonly');
  };

  /**
      Disable control
  */


  LxSpinEdit.prototype.disable = function() {
    $(this.control).addClass('disabled');
    return $(this.input).attr('readonly', 'readonly');
  };

  return LxSpinEdit;

})();
